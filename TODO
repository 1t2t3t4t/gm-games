main todo
- refactor new season code
  - abstract db access
- retiring players
  - in core.season
  - when to display notification?
- other views
- reassess how money is stored (ones, thousands, millions?)
strategic issues
- is localStorage fast enough for game_attributes, and possibly other stuff, like trades and contract negotiation?
- refactor and make sure i'm doing things correct as far as modules, namespaces, documentation, style, etc.
  - What will replace the AJAX calls? Just call api.whatever function directly and have it do the jQuery crap
- speed things up by combining transactions
- robustness
  - confirm correct database is loaded before writing anything
  - how to handle closed browser in middle of game simulation?
- don't block the UI in game simulation
  - slide 81 http://www.slideshare.net/nzakas/high-performance-javascript-capitoljs-2011
    - http://www.kryogenix.org/days/2009/07/03/not-blocking-the-ui-in-tight-javascript-loops
- cache payroll each year?
  - would simplify db.getTeams
  - would allow historical finances view

---

BUGS

game simulation stops when a link is clicked, but then restarts when another link is clicked? wtf
playoffs scheduling is fucked up. used to work. now only one series progresses at a time

---

PORTING NOTES:

team_attributes.playoffs is now team.made_playoffs
template loop count - how?
- conf rankings in standings
- class="separator"
  - box score (top 5)
  - standings (top 8)
startingSeason should be stored so later years can have different values
at some point, go through the indexeddb code. factor out common patterns into a library. combine transactions where appropriate
make sure all indexes are actually used. otherwise they're just making it slower for nothing

---

POLISH FEATURES

jslint --plusplus --predef $ --predef Davis --predef requirejs --predef define --predef window --predef document --predef localStorage --predef IDBKeyRange --predef IDBTransaction --predef g --predef c js/core/draft.js
- http://stackoverflow.com/questions/7425147/jslint-error-somefunction-was-used-before-it-was-defined
- http://stackoverflow.com/questions/6744692/jslint-should-we-tolerate-misordered-definitions
  - http://javascript.crockford.com/code.html
- http://stackoverflow.com/questions/806163/jslint-using-a-function-before-its-defined-error
roster view
- past season: go based on players.stats.tid
- make sure teams dropdown works
- trade for button
- buy out button
new season
- auto free agent signing
contract negotiation
- test all the error conditions and make sure callbacks are appropriately called (unit tests?)
- add free agent to the end of roster
- might be a good idea to make contractNegotiation.create accept ot as first parameter
player stats
- how to handle aggregating stats for players who played for more than one team in a season? add them all up in ps in db.getPlayers
player view
- contract for free agents should note that it is requested, not existing
- no contract or ratings shown for retired player
db.getPlayers
- rename to helpers.filterPlayers
- use for other access of players "playersAll"
- the special case attributes should generally be moved directly into the database.
draftTeamName and draftTeamRegion needed for anything? If not, cut them.
should db.getObjectStore always use readwrite?
Replace showNoStats with a check of stats.length in db.getPlayer, at least in some cases?
roster size check on new season
- cpu teams with < 5 players should automatically sign free agents

---

joins: http://blog.oharagroup.net/post/16394604653/a-performance-comparison-websql-vs-indexeddb        http://hacks.mozilla.org/2010/06/comparing-indexeddb-and-webdatabase/

handlebars templates -f js/templates.js

TODO:
only need handlebars.runtime.js
merge game_attributes into league table of meta database

---

g.dbl.transaction(["players"]).objectStore("players").get(476).onsuccess = function (event) { console.log(event.target.result); };

---

FUTURE:

Web workers
- An implementation is in the webworkers branch. It kind of works, but it doesn't seem to play nice with IDB transactions, so I have to open a new transaction when the callback fires, so it is problematic to have multiple workers in parallel all trying to open readwrite transactions.









# Pre-JavaScript TODO

player view
- next, previous buttons (also active on left/right arrows)
- link to team roster if player is on a team
- for retired players, either don't show ratings, or show ratings from best year

roster
- "release" only sensitive with more than 5 players
- "buy out" only sensitive when there's enough money
- highlight handle on hover, like button
- "trade for" only sensitive when trades are allowed

datatables
- default to sort descending when column is clicked
  - http://datatables.net/ref#asSorting will work. maybe pass it as an option to bbgm_datatable

finances
- conditional formatting to show negative numbers in red: https://www.google.com/search?q=site%3Adatatables.net+conditional+formatting&ie=utf-8&oe=utf-8&client=ubuntu&channel=fs

Client-side game simulation
- Robustness of javascript code
  - g.phase == 3 in league_views might introduce race condition
  - validate data from client?
  - make sure play menu doesn't ever get stuck - some kind of timeout

dashboard: a bunch of boxes showing..
- record
- playoff scenario
- history
- roster spots
- payroll
- expiring contracts
- top free agents
- league leaders
- team leaders

Single page application
- When a simulation is done (or a player is signed, or whatever), the current page should be reloaded
- during page reloads or back/forward... what about handling deeper content in URLs? i.e., what box score is being viewed? what year? what stat is sorted? what page in rankings? etc.
- when a form uses redirect_or_json, the URL isn't updated. not sure what the best way to fix that is.

move to new window button, like gmail, that will open a view in a new window with a minimal UI

play button requirements
- colors - is this a good idea?
  - green: move to new phase
  - blue: play games
  - red: other immediate action

make validate_season work correctly

include sidebar(s) showing all relevant information, plus make that stuff generated by a separate function so it can eventually be kept static as JS updates other content

grep for # links: grep -R --include="*.html" '<a href="#">' .

security
- csrf protection
  - http://flask.pocoo.org/docs/security/#cross-site-request-forgery-csrf
  - http://packages.python.org/Flask-SeaSurf/
  - http://flask.pocoo.org/snippets/3/
  - even for ajax https://docs.djangoproject.com/en/1.2/releases/1.2.5/#csrf-exception-for-ajax-requests

playoffs
- on playoffs start, automatically switch to playoffs view
- link to team rosters... or better to link to a summary of the series?

# Then

trades
- allow trades that go over roster limit, but require players to be cut or traded to meet limit before game simulation continues

self-contained game simulation code, to allow other people to hack on it easily. automatically make charts and stuff.

warning when window is closed and game simulation is in progress
- http://stackoverflow.com/questions/1244535/alert-when-browser-window-closed-accidentally
- https://developer.mozilla.org/en/DOM/window.onbeforeunload

abstract opposing team AI: make it a class with various methods to determine actions at different time points

game log
- pushstate for individual box scores as well as teams and seasons, somehow?

# BELOW IS OLD STUFF

Minor bugs:

Lottery should be for the 14 teams not in the playoffs, which isn't necessarily the same as the 14 worst teams.
Don't allow sort from first column of trade window

---

when negotiating, players change values too much when you try to change years

======
FUTURE
======

GAMESIM
-------
overtime
take all ratings into account
blocks, assists (maybe other things) should not be so evenly distributed
home and away games
synergy
- Gameplay bonuses when any of the following are true...
  - At least one player with dribbling > X
  - At least two players with shooting_three_pointers > X
  - At least three players with shooting_three_pointers > X
  - At least four players with shooting_three_pointers > X
  - At least one player with rebounding > X
  - At least one player with blocks > X
  - At least three players with steals > X
  - At least one player with inside_scoring > X
  - At least three players with speed > X and (shooting_layups > X or shooting_layups + jumping > X)

UI
--
view any team in the roster window
    drop down box at the top with team names
    all actions disabled unless team_id == common.PLAYER_TEAM_ID
    open this window when a team is double-clicked on in the standings
customize which columns are displayed in treeviews - kiwi
treeview formatting
    str, int, float, currency, date, age - do formatting based on column type
progress bars
filtering should be done with treemodelfilter? - see pygtk tutorial
play menu
    even after hiding, accelerators still work, so on menuitem activation, check to make sure it's a valid choice!!!
        or: set accelerators in python code, not glade.  then i can reuse accelerators
ratings log tab on player window
some indication of synergy
toolbar to supplement the menubar
- New Open Save | Play (drop down menu) | Roster TeamHistory | Trade FreeAgents
league history
should trade window be a window or dialog?
update statusbar while game is saving/loading
player info window spawned from trade dialog and contract window should have clickable controls
- problem: a minimal example doesn't have this problem, so I don't know what's wrong
in team stats tab, allow toggle to show opponent stats

NBA
---
real salary cap rules: http://en.wikipedia.org/wiki/NBA_Salary_Cap
real contract rules (max/min, etc.)
allow contracts that aren't the same $ every year
team and player options
releasing players - see the salary cap wiki page for complicated rule
luxury tax: (team_salary - 65mil) penalty if team salary is > 65mil
trading deadline

BACKEND
-------
archive stats as averages - this will make the end of season awards feasible, and make the stats view faster/easier
uncertainty in rating - for each player, calculate a randn(0, 3) with max/min of +/- 5
    calculate a new one each year and add it to 1/2 of the previous one
teams should be smart in resigning players (now it's just random)
use constants for phase #'s, other things.  maybe create a dict CONST in common.py?
    confirm that teams always have at least 5 players

AI (NON-GAMESIM)
----------------
trade
- mechanism similar to free_agent_times_asked to prevent prolonged negotiations
- AI teams trade with each other
- opponent GM trade AI based on their team's status: contending or rebuilding
- record player value for contending and rebuilding teams in player_attributes, so opposing GMs can more easily suggest trades (i.e. "i'll make the deal if you throw in X")
- Feedback from trades (way off, that's close, etc)
- "Oh, you again?" after failed trade attempts
- AI teams should be aware of contract lengths and the implications thereof
AI teams release/buy out players to sign a better free agent

FEATURES
--------
injuries
opponent GM trade AI based on their team's status: contending or rebuilding
change prices of tickets, concessions, etc
hire coaches to influence development
different sized cities with differently passionate fanbases - affects attendance and home court advantage
multi-team trades... how can i make a good UI for that?
advanced stats (+/-, PER, etc)
punishment for going in debt: if cash is less than $10M, can't sign any new contracts
advisors
trades
- draft picks
- cash
- drop players as part of trade, to free up roster space
