import type { PlayerBioInfoProcessed } from "../../common/types";
import defaultDefaultColleges from "../data/defaultColleges";
import defaultCountries from "../data/defaultCountries";
import g from "./g";

// The names were generated by tools/names.js, you probably don't want to edit them by hand.
// If the list of countries changes, update the fake age code in getPlayerFakeAge.js!
// This is dynamically resolved with rollup-plugin-alias
import names from "player-names"; // eslint-disable-line
const defaultNames = (names as unknown) as Record<
	string,
	{
		first: Record<string, number>;
		last: Record<string, number>;
	}
>;

const toCumSumArray = (obj: Record<string, number>): [string, number][] => {
	let cumsum = 0;
	return Object.entries(obj).map(([key, value]) => {
		cumsum += value;
		return [key, cumsum];
	});
};

const legacyConvert = (array: [string, number][]) => {
	const obj: Record<string, number> = {};
	let prev = 0;
	for (const row of array) {
		obj[row[0]] = row[1] - prev;
		prev = row[1];
	}
	return obj;
};

const loadNames = (): PlayerBioInfoProcessed => {
	let gPlayerBioInfo = g.get("playerBioInfo");
	const gNames = g.get("names");
	if (!gPlayerBioInfo && gNames) {
		const countryNames = Object.keys(gNames.first);

		const names: Record<
			string,
			{
				first: Record<string, number>;
				last: Record<string, number>;
			}
		> = {};

		if (Array.isArray(gNames.first) && Array.isArray(gNames.last)) {
			// Double legacy!
			names.USA = {
				first: legacyConvert(gNames.first),
				last: legacyConvert(gNames.last),
			};
		} else {
			for (const countryName of countryNames) {
				names[countryName] = {
					first: legacyConvert(gNames.first[countryName]),
					last: legacyConvert(gNames.last[countryName]),
				};
			}
		}

		gPlayerBioInfo = {
			names,
		};
	}

	// If a country is specified in g.playerBioInfo.names, it overrides the built-in ones. But built-in ones still exists and could be used, depending on the value of "countries"
	const mergedNames =
		gPlayerBioInfo && gPlayerBioInfo.names
			? {
					...defaultNames,
					...gPlayerBioInfo.names,
			  }
			: {
					...defaultNames,
			  };

	const names: PlayerBioInfoProcessed["names"] = {};
	for (const [country, info] of Object.entries(mergedNames)) {
		names[country] = {
			first: toCumSumArray(info.first),
			last: toCumSumArray(info.last),
		};
	}

	const colleges: PlayerBioInfoProcessed["colleges"] = {};
	if (gPlayerBioInfo && gPlayerBioInfo.colleges) {
		for (const [country, object] of Object.entries(gPlayerBioInfo.colleges)) {
			colleges[country] = toCumSumArray(object);
		}
	}
	if (!colleges._default) {
		colleges.default = toCumSumArray(defaultDefaultColleges);
	}

	const percentSkipCollege: PlayerBioInfoProcessed["percentSkipCollege"] = {
		// By default, 98% skip college (in default data, USA and Canada are specified and no other countries are)
		Canada: 0.02,
		USA: 0.02,
		_default: 0.98,
	};
	if (gPlayerBioInfo && gPlayerBioInfo.percentSkipCollege) {
		for (const [country, num] of Object.entries(
			gPlayerBioInfo.percentSkipCollege,
		)) {
			percentSkipCollege[country] = num;
		}
	}

	return {
		colleges,
		countries: toCumSumArray(defaultCountries),
		names,
		percentSkipCollege,
	};
};

export default loadNames;
